# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
application.secret="Tf_gf>O0BUcqMqOsANg8H[D6KWNLTw_ovt/aOmBtQrFZLR?I:D3<cTB2]PNJs>y?"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
application.global=bootstrap.Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `conf/my.application.Router`,
# you may need to define a router file `my.application.routes`.
# Default to Routes in the root package (and `conf/routes`)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""
#
# You can expose this datasource via JNDI if needed (Useful for JPA)
# db.default.jndiName=DefaultDS
# mongodb connection details
connections {
  mongo{
    name = "musicamise"
    slave = false
    servers = ["127.0.0.1:27017"]
  }
}

//obs: mongo.config = "bootstrap.MongoConf" local
//obs: mongo.config = "bootstrap.MongoConfig" production


mongo.config = "bootstrap.MongoConfig"


pagseguro.url.sandbox = "https://sandbox.pagseguro.uol.com.br/v2/checkout/payment.html"
pagseguro.url.real = "https://pagseguro.uol.com.br/v2/checkout/payment.html"

pagseguro.ws.url.sandbox = "https://ws.sandbox.pagseguro.uol.com.br/v2/checkout/"
pagseguro.ws.url.real = "https://ws.pagseguro.uol.com.br/v2/checkout/"

pagseguro.ws.consult.sandbox = "https://ws.sandbox.pagseguro.uol.com.br/v3/transactions/"
pagseguro.ws.consult.real = "https://ws.pagseguro.uol.com.br/v3/transactions/"

pagseguro.ws.notification.sandbox =  "https://ws.sandbox.pagseguro.uol.com.br/v3/notifications/"
pagseguro.ws.notification.real =  "https://ws.pagseguro.uol.com.br/v3/notifications/"


pagseguro.url =  "https://sandbox.pagseguro.uol.com.br/v2/checkout/payment.html"
pagseguro.ws.url =  "https://ws.sandbox.pagseguro.uol.com.br/v2/checkout/"
pagseguro.ws.consult.url =  "https://ws.sandbox.pagseguro.uol.com.br/v3/transactions/"
pagseguro.ws.notification.url =  "https://ws.sandbox.pagseguro.uol.com.br/v3/transactions/notifications/"


# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Ebean configuration
# ~~~~~
# You can declare as many Ebean servers as you want.
# By convention, the default server is named `default`
#
# ebean.default="models.*"

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

smtp.host = "smtp.zoho.com"
smtp.port = "465"
smtp.ssl = "yes"
#smtp.tls  (defaults to no)
smtp.user = ""
smtp.user = ${?send.email.sender}
smtp.password = ""
smtp.password = ${?send.email.pass}

#smtp.debug (defaults to no, to take effect you also need to set the log level to "DEBUG" for the application logger)
#smtp.mock (defaults to no, will only log all the email properties instead of sending an email)
#smtp.timeout (defaults to 60s)
#smtp.connectiontimeout (defaults to 60s)


//Musicamise
aws.access.key=""
aws.secret.key=""
aws.s3.bucket=""
//Musicamise
pagseguro.email = ""
pagseguro.token = ""
